//
//  HomeView.swift
//  HarubitV3
//
//  Created by ellllly on 4/22/25.
//

import SwiftUI
import SwiftData

struct HomeView: View {
    
    @State private var currentIndex = 2
    @Query private var model: [GratitudeCard]
    
    @State private var content: String = ""
    @State private var date: Date = Date.now
    
    var selectedDate: Date
    
    var today: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy. MM. dd"
        return formatter.string(from: Date())
    }
    
    let localQuotes = [
        "Í∞êÏÇ¨Îäî ÎßàÏùåÏóêÏÑú ÎÇòÏò§Îäî Í∏∞ÏÅ®Ïù¥Îã§. \n‚Äì ÏúåÎ¶¨ÏóÑ ÏïÑÏÑú ÏõåÎìú",
        "Í∞êÏÇ¨Îäî Ïö∞Î¶¨Í∞Ä Î∞õÏùÄ Î™®Îì† Í≤ÉÏóê ÎåÄÌï¥ ÍπäÏù¥ Í∞êÏÇ¨ÌïòÎäî ÎßàÏùåÏù¥Îã§. \n‚Äì Ï°¥ F. ÏºÄÎÑ§Îîî",
        "Í∞êÏÇ¨Îäî ÎÇòÏùò ÏÇ∂ÏùÑ Ï±ÑÏö∞Îäî Í∏∞ÏÅ®Ïù¥Îã§. Í∞êÏÇ¨Ìï®ÏúºÎ°ú Î™®Îì† Í≤ÉÏùÑ Î∞îÎùºÎ≥¥Î©¥ ÏÑ∏ÏÉÅÏùÄ ÏïÑÎ¶ÑÎã§ÏõåÏßÑÎã§. \n‚Äì ÎßàÏïº ÏïàÏ†§Î£®",
        "Í∞êÏÇ¨Îäî ÌñâÎ≥µÏùò Ïó¥Ïá†Ïù¥Îã§. Í∞êÏÇ¨ÌïòÏßÄ ÏïäÏúºÎ©¥ ÏïÑÎ¨¥Î¶¨ ÎßéÏùÄ Í≤ÉÏùÑ Í∞ÄÏ†∏ÎèÑ ÌñâÎ≥µÌï† Ïàò ÏóÜÎã§. \n‚Äì ÏúåÎ¶¨ÏóÑ Î∏îÎ†àÏù¥ÌÅ¨",
        "Ïö∞Î¶¨Í∞Ä Í∞êÏÇ¨Ìï† Îïå, Ïö∞Î¶¨Îäî Ï£ºÏúÑÏùò Î™®Îì† Ï¢ãÏùÄ Í≤ÉÎì§ÏùÑ ÎÅåÏñ¥ÎãπÍ∏¥Îã§. \n‚Äì Î£®Ïù¥Ïûê Î©îÏù¥ Ïò¨ÏΩß",
        "Í∞êÏÇ¨ÌïòÎäî ÎßàÏùåÏùÄ Í∞ÄÏû• ÌÅ∞ ÌñâÎ≥µÏùÑ Í∞ÄÏ†∏Ïò®Îã§. \n‚Äì Ìó¨Î†å ÏºàÎü¨",
        "Í∞êÏÇ¨Îäî ÏÇ¨ÎûåÏùÑ ÎçîÏö± Í∞ïÌïòÍ≤å ÎßåÎì†Îã§. Ïö∞Î¶¨Í∞Ä Í∞ÄÏßÑ Í≤ÉÏóê Í∞êÏÇ¨Ìï®ÏúºÎ°úÏç®, Ïö∞Î¶¨Îäî Îçî ÎßéÏùÄ Í≤ÉÏùÑ ÏñªÏùÑ Ïàò ÏûàÎã§. \n‚Äì Ï°∞ÏßÄ ÏõåÏã±ÌÑ¥",
        "Ïö∞Î¶¨Í∞Ä Í∞ÄÏßÑ Í≤ÉÏùÑ Í∞êÏÇ¨Ìï† Ï§Ñ ÏïÑÎäî Í≤ÉÏù¥ ÏßÑÏ†ïÌïú Î∂ÄÏú†Ìï®Ïù¥Îã§. \n‚Äì ÎØ∏ÌïòÏùº Î∞îÌùêÏπú",
        "Í∞êÏÇ¨Îäî Îã®ÏàúÌûà ÎßàÏùåÏóêÏÑú ÎÇòÏò§Îäî Í≤ÉÏù¥ ÏïÑÎãàÎùº, ÌñâÎèôÏúºÎ°ú Ïù¥Ïñ¥Ï†∏Ïïº ÌïúÎã§. \n‚Äì ÏúåÎ¶¨ÏóÑ ÏïÑÎçî ÏõåÎìú",
        "ÌïòÎ£® ÌïòÎ£®Î•º Í∞êÏÇ¨Ìï®ÏúºÎ°ú ÏÇ¥ÏïÑÍ∞ÑÎã§Î©¥, ÎÇ¥ÏùºÏùÄ ÎçîÏö± ÎπõÎÇ† Í≤ÉÏù¥Îã§. \n‚Äì Ï°¥ Ïö∞Îì†"
    ]
    
    
    var years: [Int] {
        let currentYear = Calendar.current.component(.year, from: selectedDate)
            
            return [currentYear - 2, currentYear - 1, currentYear, currentYear + 1]
        }
    
    func displayDate(for year: Int) -> String {
        var comps = Calendar.current.dateComponents([.month, .day], from: selectedDate)
        comps.year = year
        
        guard let date = Calendar.current.date(from: comps) else {return "" }

        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy. MM. dd"
        
        return formatter.string(from: date)
        
    }
    
    private var cardWidth: CGFloat {
            UIScreen.main.bounds.width - 80   // üëà 40+40 Ïó¨Î∞±
        }
    
    var body: some View {
        ZStack{
            Image("background2")
                .resizable()
                .scaledToFill() // Ïù¥ÎØ∏ÏßÄ Ïä§ÏºÄÏùº ÍΩâÏ∞®Í≤å Ìï¥Ï§å
                .ignoresSafeArea()
           
            VStack {
                Text("Harubit")
                    .font(.largeTitle)
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                    .padding([.top, .bottom], 50)
            
                TabView(selection: $currentIndex) {
                    ForEach(years.indices, id: \.self) { i in
                        let year = years[i]
                        let showDate = displayDate(for: year)
                        
                        ZStack {
                            GratitudeCardView()
                                .frame(width: cardWidth, height: 400)
                            ScrollView {
                                VStack {
                                    
                                    Text(showDate)
                                        .foregroundColor(.brown)
                                        .font(.title2)
                                        .padding(.top, 40)
                                    Spacer()
                                    if let model = model.first(where: { item in
                                        Calendar.current.isDate(item.date, inSameDayAs: selectedDate)
                                        
                                    }) {
                                        
                                        Text(model.content)
                                            .multilineTextAlignment(.center)
                                            .font(.system(size: 28, weight: .regular, design: .default))
                                            .foregroundColor(Color(red: 0.45, green: 0.42, blue: 0.28))
                                            .padding(.bottom, 30)
                                    } else {
                                        Text(localQuotes.randomElement() ?? "")
                                            .italic()
                                            .multilineTextAlignment(.center)
                                            .foregroundColor(.gray)
                                            .padding(.bottom, 30)
                                            .frame(maxWidth: .infinity, alignment: .leading)
                                        
                                    }
                                    Spacer()
                                }
                                .frame(width: 230, height: 340, alignment: .top)
                            }
                        }
                        .scaleEffect(i == currentIndex ? 1.0 : 0.9)
                        .rotation3DEffect(.degrees(i == currentIndex ? 0 : 20),
                                              axis: (x: 0, y: -1, z: 0),
                                          anchor: .center)
                        .opacity(i == currentIndex ? 1.0 : 0.6)
                        .padding(.horizontal, 32)
                        .tag(i)
                        .animation(.easeInOut, value: currentIndex)
//                        Text("Page \(i + 1)")
//                            .frame(maxWidth: 280, maxHeight: 400)
//                            .background(Color.blue.opacity(0.2), in : RoundedRectangle(cornerRadius: 50))
//                            .tag(i)
                    }
                }
                .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) // Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ Ïà®Í∏∞Í∏∞
                .frame(width:350, height: 460)
                .padding(.horizontal, 40)

                // üëâ Ïª§Ïä§ÌÖÄ Ïù∏ÎîîÏºÄÏù¥ÌÑ∞
                HStack(spacing: 8) {
                    ForEach(0..<3) { i in
                        RoundedRectangle(cornerRadius: 4)
                            .fill(i == currentIndex ? .brown : .gray)
                            .frame(width: i == currentIndex ? 20 : 8, height: 8)
                            .animation(.easeInOut, value: currentIndex)
                    }
                }
                .padding(.top, 10)
                
//                Button("Weekly Gratitude") {
//
//                }
            }
        }
    }
}

#Preview {
    HomeView(selectedDate: Date())
}
